{"version":3,"file":"index.m.js","sources":["../src/base.ts","../src/utils.ts","../src/cms/index.ts","../src/auth/index.ts","../src/project/index.ts","../src/index.ts"],"sourcesContent":["import fetch from 'isomorphic-unfetch'\n\ntype Config = {\n    version?: string,\n    basePath?: string,\n}\n\nexport type Pagination = {\n    page?: number,\n    per_page?: number,\n}\n\nexport abstract class Base {\n    private version: string\n    private basePath: string\n    private defaultVersion = 'v1/';\n    private defaultBaseURL = 'https://api.spotbase.io/'\n    private authToken: string\n\n    constructor(config: Config) {\n        this.version =  config && config.version ? config.version + '/' || this.defaultVersion : this.defaultVersion;\n        this.basePath = config && config.basePath ? config.basePath + '/' + this.version || this.defaultBaseURL + this.version : this.defaultBaseURL + this.version;\n    }\n    \n    protected request<T> (endpoint: string, auth?: boolean, options?: RequestInit): Promise<T> {\n        const url = this.basePath + endpoint\n        let headers = {\n            'Content-type': 'application/json'\n        }\n\n        if (auth) {\n            headers = {...headers, ...{'Authorization': 'Bearer '+this.getAuthToken()}}\n        }\n\n        const config = {\n            ...options,\n            headers\n        }\n\n        return fetch(url, config).then(r => {\n            if (r.ok) {\n                return r.json()\n            }\n\n            throw new Error(r.statusText)\n        })\n    }\n\n    protected setAuthToken (token: string) {\n        if (!token) {\n            return\n        }\n\n        this.authToken = token\n    }\n\n    protected getAuthToken (): string {\n        return this.authToken;\n    }\n}\n","export function applyMixins(derivedCtor: any, baseCtors: any[]) {\n    baseCtors.forEach(baseCtor => {\n      Object.getOwnPropertyNames(baseCtor.prototype).forEach(name => {\n        Object.defineProperty(\n          derivedCtor.prototype,\n          name,\n          Object.getOwnPropertyDescriptor(baseCtor.prototype, name)\n        );\n      });\n    });\n}\n","import { Config } from './types'\nimport { Base } from '../base'\n\nlet path = 'project/PROJECT/addon/cms/TOKEN/';\n\nexport class CMS extends Base {\n    async getCMSConfig (project: string, token: string): Promise<Config> {\n        if (!token || !project) {\n            return Promise.resolve({});\n        }\n\n        const getPath = path.replace(\"PROJECT\", project).replace(\"TOKEN\", token);\n\n        return await this.request<Config>(getPath + 'config')\n    }\n\n    async patchCMSConfig (project: string, token: string, data: Config): Promise<string> {\n        if (!token || !project) {\n            return Promise.resolve(\"400\");\n        }\n\n        const patchPath = path.replace(\"PROJECT\", project).replace(\"TOKEN\", token);\n\n        return this.request<string>(patchPath + 'config', true, {\n            method: 'PATCH',\n            body: JSON.stringify(data)\n        })\n    }\n\n    async getItems (project: string, token: string): Promise<any> {\n        if (!token || !project) {\n            return Promise.resolve({});\n        }\n\n        const getPath = path.replace(\"PROJECT\", project).replace(\"TOKEN\", token);\n\n        return await this.request<any>(getPath + 'items')\n    }\n\n    async getFields (project: string, token: string): Promise<any> {\n        if (!token || !project) {\n            return Promise.resolve({});\n        }\n\n        const getPath = path.replace(\"PROJECT\", project).replace(\"TOKEN\", token);\n\n        return await this.request<any>(getPath + 'fields', true)\n    }\n\n    async getProgress (project: string, token: string): Promise<any> {\n        if (!token || !project) {\n            return Promise.resolve({});\n        }\n\n        const getPath = path.replace(\"PROJECT\", project).replace(\"TOKEN\", token);\n\n        return await this.request<any>(getPath + 'progress', true)\n    }\n}\n","import { Base } from '../base'\nimport { createClient } from '@supabase/supabase-js'\n\nlet supabase = createClient('https://yijpzmbtxcpgpswkvyfd.supabase.co', 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InlpanB6bWJ0eGNwZ3Bzd2t2eWZkIiwicm9sZSI6ImFub24iLCJpYXQiOjE2OTQwOTAyNTgsImV4cCI6MjAwOTY2NjI1OH0.I66q9wcZlkYXTMN1RKB_hLorD71jWq2ehaNxjA31Imk')\n\nexport class Auth extends Base {\n    async login (user: string, password: string) {\n        const { data, error } = await supabase.auth.signInWithPassword({\n            email: user,\n            password: password\n        });\n\n        if (data.session) {\n            this.setAuthToken(data.session.access_token)\n        } else {\n            console.log(error)\n        }\n    }\n\n    async logout () {\n        const { error } = await supabase.auth.signOut();\n\n        if (error.status != 200) {\n            console.log(error.message)\n        }\n    }\n}","import { Base } from '../base'\nimport { Domains } from './types'\n\nlet path = 'project/PROJECT/';\n\nexport class Project extends Base {\n    async getProjectDomains (project: string): Promise<any> {\n        if (!project) {\n            return Promise.resolve({});\n        }\n\n        const getPath = path.replace(\"PROJECT\", project);\n\n        return await this.request<any>(getPath + 'domains', true)\n    }\n\n    async patchProjectDomains (project: string, data: Domains): Promise<string> {\n        if (!project || ! data) {\n            return Promise.resolve(\"400\");\n        }\n\n        const patchPath = path.replace(\"PROJECT\", project);\n\n        return this.request<string>(patchPath + 'domains', true, {\n            method: 'PATCH',\n            body: JSON.stringify(data)\n        })\n    }\n\n    async deleteProjectDomains (project: string, data: Domains): Promise<string> {\n        if (!project || ! data) {\n            return Promise.resolve(\"400\");\n        }\n\n        const deletePath = path.replace(\"PROJECT\", project);\n\n        return this.request<string>(deletePath + 'domains', true, {\n            method: 'DELETE',\n            body: JSON.stringify(data)\n        })\n    }\n}\n","import { CMS } from './cms'\nimport { Auth } from './auth'\nimport { Project } from './project'\nimport { applyMixins } from './utils'\nimport { Base } from './base'\n\nclass Spotbase extends Base {}\ninterface Spotbase extends CMS, Auth, Project {}\napplyMixins(Spotbase, [CMS, Auth, Project]);\n\nexport default Spotbase\n"],"names":["derivedCtor","Base","config","version","this","basePath","defaultVersion","defaultBaseURL","authToken","_proto","prototype","request","endpoint","auth","options","url","headers","_extends","Authorization","getAuthToken","fetch","then","r","ok","json","Error","statusText","setAuthToken","token","path","CMS","_Base","apply","arguments","_inheritsLoose","getCMSConfig","project","Promise","resolve","getPath","replace","e","reject","patchCMSConfig","data","patchPath","method","body","JSON","stringify","getItems","getFields","getProgress","supabase","createClient","Auth","login","user","password","_this","signInWithPassword","email","_ref","error","session","access_token","console","log","logout","signOut","_ref2","status","message","Project","getProjectDomains","patchProjectDomains","deleteProjectDomains","deletePath","Spotbase","forEach","baseCtor","Object","getOwnPropertyNames","name","defineProperty","getOwnPropertyDescriptor"],"mappings":"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"}