{"version":3,"file":"index.modern.js","sources":["../src/base.ts","../src/cms/index.ts","../src/auth/index.ts","../src/project/index.ts","../src/index.ts","../src/utils.ts"],"sourcesContent":["import fetch from 'isomorphic-unfetch'\n\ntype Config = {\n    version?: string,\n    basePath?: string,\n}\n\nexport type Pagination = {\n    page?: number,\n    per_page?: number,\n}\n\nexport abstract class Base {\n    private version: string\n    private basePath: string\n    private defaultVersion = 'v1/';\n    private defaultBaseURL = 'https://api.spotbase.io/'\n    private authToken: string\n\n    constructor(config: Config) {\n        this.version =  config && config.version ? config.version + '/' || this.defaultVersion : this.defaultVersion;\n        this.basePath = config && config.basePath ? config.basePath + '/' + this.version || this.defaultBaseURL + this.version : this.defaultBaseURL + this.version;\n    }\n    \n    protected request<T> (endpoint: string, auth?: boolean, options?: RequestInit): Promise<T> {\n        const url = this.basePath + endpoint\n        let headers = {\n            'Content-type': 'application/json'\n        }\n\n        if (auth) {\n            headers = {...headers, ...{'Authorization': 'Bearer '+this.getAuthToken()}}\n        }\n\n        const config = {\n            ...options,\n            headers\n        }\n\n        return fetch(url, config).then(r => {\n            if (r.ok) {\n                return r.json()\n            }\n\n            throw new Error(r.statusText)\n        })\n    }\n\n    protected setAuthToken (token: string) {\n        if (!token) {\n            return\n        }\n\n        this.authToken = token\n    }\n\n    protected getAuthToken (): string {\n        return this.authToken;\n    }\n}\n","import { Config } from './types'\nimport { Base } from '../base'\n\nlet path = 'project/PROJECT/addon/cms/TOKEN/';\n\nexport class CMS extends Base {\n    async getCMSConfig (project: string, token: string): Promise<Config> {\n        if (!token || !project) {\n            return Promise.resolve({});\n        }\n\n        const getPath = path.replace(\"PROJECT\", project).replace(\"TOKEN\", token);\n\n        return await this.request<Config>(getPath + 'config')\n    }\n\n    async patchCMSConfig (project: string, token: string, data: Config): Promise<string> {\n        if (!token || !project) {\n            return Promise.resolve(\"400\");\n        }\n\n        const patchPath = path.replace(\"PROJECT\", project).replace(\"TOKEN\", token);\n\n        return this.request<string>(patchPath + 'config', true, {\n            method: 'PATCH',\n            body: JSON.stringify(data)\n        })\n    }\n\n    async getItems (project: string, token: string): Promise<any> {\n        if (!token || !project) {\n            return Promise.resolve({});\n        }\n\n        const getPath = path.replace(\"PROJECT\", project).replace(\"TOKEN\", token);\n\n        return await this.request<any>(getPath + 'items')\n    }\n\n    async getFields (project: string, token: string): Promise<any> {\n        if (!token || !project) {\n            return Promise.resolve({});\n        }\n\n        const getPath = path.replace(\"PROJECT\", project).replace(\"TOKEN\", token);\n\n        return await this.request<any>(getPath + 'fields', true)\n    }\n\n    async getProgress (project: string, token: string): Promise<any> {\n        if (!token || !project) {\n            return Promise.resolve({});\n        }\n\n        const getPath = path.replace(\"PROJECT\", project).replace(\"TOKEN\", token);\n\n        return await this.request<any>(getPath + 'progress', true)\n    }\n}\n","import { Base } from '../base'\nimport { createClient } from '@supabase/supabase-js'\n\nlet supabase = createClient('https://yijpzmbtxcpgpswkvyfd.supabase.co', 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InlpanB6bWJ0eGNwZ3Bzd2t2eWZkIiwicm9sZSI6ImFub24iLCJpYXQiOjE2OTQwOTAyNTgsImV4cCI6MjAwOTY2NjI1OH0.I66q9wcZlkYXTMN1RKB_hLorD71jWq2ehaNxjA31Imk')\n\nexport class Auth extends Base {\n    async login (user: string, password: string) {\n        const { data, error } = await supabase.auth.signInWithPassword({\n            email: user,\n            password: password\n        });\n\n        if (data.session) {\n            this.setAuthToken(data.session.access_token)\n        } else {\n            console.log(error)\n        }\n    }\n\n    async logout () {\n        const { error } = await supabase.auth.signOut();\n\n        if (error.status != 200) {\n            console.log(error.message)\n        }\n    }\n}","import { Base } from '../base'\nimport { Domains } from './types'\n\nlet path = 'project/PROJECT/';\n\nexport class Project extends Base {\n    async getProjectDomains (project: string): Promise<any> {\n        if (!project) {\n            return Promise.resolve({});\n        }\n\n        const getPath = path.replace(\"PROJECT\", project);\n\n        return await this.request<any>(getPath + 'domains', true)\n    }\n\n    async patchProjectDomains (project: string, data: Domains): Promise<string> {\n        if (!project || ! data) {\n            return Promise.resolve(\"400\");\n        }\n\n        const patchPath = path.replace(\"PROJECT\", project);\n\n        return this.request<string>(patchPath + 'domains', true, {\n            method: 'PATCH',\n            body: JSON.stringify(data)\n        })\n    }\n\n    async deleteProjectDomains (project: string, data: Domains): Promise<string> {\n        if (!project || ! data) {\n            return Promise.resolve(\"400\");\n        }\n\n        const deletePath = path.replace(\"PROJECT\", project);\n\n        return this.request<string>(deletePath + 'domains', true, {\n            method: 'DELETE',\n            body: JSON.stringify(data)\n        })\n    }\n}\n","import { CMS } from './cms'\nimport { Auth } from './auth'\nimport { Project } from './project'\nimport { applyMixins } from './utils'\nimport { Base } from './base'\n\nclass Spotbase extends Base {}\ninterface Spotbase extends CMS, Auth, Project {}\napplyMixins(Spotbase, [CMS, Auth, Project]);\n\nexport default Spotbase\n","export function applyMixins(derivedCtor: any, baseCtors: any[]) {\n    baseCtors.forEach(baseCtor => {\n      Object.getOwnPropertyNames(baseCtor.prototype).forEach(name => {\n        Object.defineProperty(\n          derivedCtor.prototype,\n          name,\n          Object.getOwnPropertyDescriptor(baseCtor.prototype, name)\n        );\n      });\n    });\n}\n"],"names":["Base","constructor","config","version","basePath","defaultVersion","this","defaultBaseURL","authToken","request","endpoint","auth","options","url","headers","_extends","Authorization","getAuthToken","fetch","then","r","ok","json","Error","statusText","setAuthToken","token","path","supabase","createClient","Spotbase","derivedCtor","getCMSConfig","project","Promise","resolve","getPath","replace","patchCMSConfig","data","patchPath","method","body","JSON","stringify","getItems","getFields","getProgress","login","user","password","error","signInWithPassword","email","session","access_token","console","log","logout","signOut","status","message","getProjectDomains","patchProjectDomains","deleteProjectDomains","deletePath","forEach","baseCtor","Object","getOwnPropertyNames","prototype","name","defineProperty","getOwnPropertyDescriptor"],"mappings":"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"}