{"version":3,"file":"index.modern.js","sources":["../src/base.ts","../src/cms/index.ts","../src/project/index.ts","../src/index.ts","../src/utils.ts","../src/auth/index.ts"],"sourcesContent":["import fetch from 'isomorphic-unfetch'\nimport { createClient, SupabaseClient } from '@supabase/supabase-js'\n\ntype Config = {\n    version?: string,\n    basePath?: string,\n}\n\nexport type Pagination = {\n    page?: number,\n    per_page?: number,\n}\n\nexport abstract class Base {\n    private version: string\n    private basePath: string\n    private defaultVersion = 'v1/';\n    private defaultBaseURL = 'https://api.spotbase.io/'\n    private authToken: string\n    protected supabase: SupabaseClient\n\n    constructor(config: Config) {\n        this.version =  config && config.version ? config.version + '/' || this.defaultVersion : this.defaultVersion;\n        this.basePath = config && config.basePath ? config.basePath + '/' + this.version || this.defaultBaseURL + this.version : this.defaultBaseURL + this.version;\n        this.supabase = createClient('https://yijpzmbtxcpgpswkvyfd.supabase.co', 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InlpanB6bWJ0eGNwZ3Bzd2t2eWZkIiwicm9sZSI6ImFub24iLCJpYXQiOjE2OTQwOTAyNTgsImV4cCI6MjAwOTY2NjI1OH0.I66q9wcZlkYXTMN1RKB_hLorD71jWq2ehaNxjA31Imk');\n    }\n    \n    protected request<T> (endpoint: string, auth?: boolean, options?: RequestInit): Promise<T> {\n        const url = this.basePath + endpoint\n        let headers = {\n            'Content-type': 'application/json'\n        }\n\n        if (auth) {\n            headers = {...headers, ...{'Authorization': 'Bearer '+this.getAuthToken()}}\n        }\n\n        const config = {\n            ...options,\n            headers\n        }\n\n        return fetch(url, config).then(r => {\n            if (r.ok) {\n                return r.json()\n            }\n\n            throw new Error(r.statusText)\n        })\n    }\n\n    protected setAuthToken (token: string) {\n        if (!token) {\n            return\n        }\n\n        this.authToken = token\n    }\n\n    protected getAuthToken (): string {\n        return this.authToken;\n    }\n}\n","import { Config, Addon } from './types'\nimport { Base } from '../base'\n\nlet path = 'project/PROJECT/addon/cms/TOKEN/';\n\nexport class CMS extends Base {\n    async getCMSConfig (project: string, token: string): Promise<{data: Config, error: Error | null}> {\n        if (!token || !project) {\n            return {data: {}, error: new Error(\"project and token are required\")};\n        }\n\n        const getPath = path.replace(\"PROJECT\", project).replace(\"TOKEN\", token);\n\n        const data =  await this.request<Config>(getPath + 'config');\n\n        if (!data) {\n            return {data: {}, error: new Error(\"error getting cms config\")}\n        }\n\n        return {data: data, error: null}\n    }\n\n    async patchCMSConfig (project: string, token: string, config: Config): Promise<{data: string, error: Error | null}> {\n        if (!token || !project || !config) {\n            return {data: \"error\", error: new Error(\"project, token and config are required\")};\n        }\n\n        const patchPath = path.replace(\"PROJECT\", project).replace(\"TOKEN\", token);\n\n        const {data, error } = await this.request<any>(patchPath + 'config', true, {\n            method: 'PATCH',\n            body: JSON.stringify(config)\n        })\n\n        if (error) {\n            return {data: \"error\", error: new Error(error.message)}\n        }\n\n        return {data: data, error: null}\n    }\n\n    async getItems (project: string, token: string): Promise<{data: any, error: Error | null}> {\n        if (!token || !project) {\n            return {data: \"error\", error: new Error(\"project and token are required\")};\n        }\n\n        const getPath = path.replace(\"PROJECT\", project).replace(\"TOKEN\", token);\n\n        const {data, error } = await this.request<any>(getPath + 'items');\n\n        if (error) {\n            return {data: \"error\", error: new Error(error.message)}\n        }\n\n        return {data: data, error: null}\n    }\n\n    async getFields (project: string, token: string): Promise<{data: any, error: Error | null}> {\n        if (!token || !project) {\n            return {data: \"error\", error: new Error(\"project and token are required\")};\n        }\n\n        const getPath = path.replace(\"PROJECT\", project).replace(\"TOKEN\", token);\n\n        const {data, error } = await this.request<any>(getPath + 'fields', true)\n\n        if (error) {\n            return {data: \"error\", error: new Error(error.message)}\n        }\n\n        return {data: data, error: null}\n    }\n\n    async getProgress (project: string, token: string): Promise<{data: any, error: Error | null}> {\n        if (!token || !project) {\n            return {data: \"error\", error: new Error(\"project and token are required\")};\n        }\n\n        const getPath = path.replace(\"PROJECT\", project).replace(\"TOKEN\", token);\n\n        const {data, error } = await this.request<any>(getPath + 'progress', true)\n\n        if (error) {\n            return {data: \"error\", error: new Error(error.message)}\n        }\n\n        return {data: data, error: null}\n    }\n\n    async getAddon (id: string): Promise<{data: Addon, error: Error | null}> {\n        if (!id) {\n            return { data: null, error: new Error(\"addon id is required\")};\n        }\n\n        const { data, error } = await this.supabase.from(\"addons\")\n        .select().eq(\"id\", id).maybeSingle();\n\n        if (error) {\n            return { data: null, error: new Error(error.message)};\n        }\n\n        let addon: Addon = {\n            id: data.id,\n            name: data.name,\n            project: data.project,\n            type: data.type,\n            user_id: data.user_id,\n            data: data.data\n        };\n\n        return { data: addon, error: null};\n    }\n\n    async getAddons(project_id: string, start: number, offset: number): Promise<{data: Addon[],error: Error | null}> {\n        const { data, error } = await this.supabase.from(\"addons\")\n        .select(`id,created_at,name,project,type,data,user_id`)\n        .order(\"created_at\", { ascending: false })\n        .range(start, offset)\n        .eq(\"project\", project_id)\n\n        if (error) {\n            return { data: [], error: new Error(error.message)};\n        }\n\n        let addons: Addon[] = [];\n        data.forEach(element => {\n            let addon: Addon = {\n                id: element.id,\n                name: element.name,\n                project: element.project,\n                type: element.type,\n                user_id: element.user_id,\n                data: element.data\n            };\n            addons.push(addon);\n        });\n\n        return { data: addons, error: null};\n    }\n}\n","import { Base } from '../base'\nimport { Domain, UserProject } from './types'\n\nlet path = 'project/PROJECT/';\n\nexport class Project extends Base {\n    async getProjectDomains (project: string): Promise<{data: Domain[],error: Error | null}> {\n        if (!project) {\n            return { data: [], error: new Error(\"project id is required\")};\n        }\n\n        const getPath = path.replace(\"PROJECT\", project);\n\n        const { data, error } = await this.request<any>(getPath + 'domains', true);\n\n        if (error) {\n            return { data: [], error: new Error(error.message)};\n        }\n\n        let domains: Domain[] = [];\n        data.forEach(element => {\n            let domain: Domain = {\n                id: element.id,\n                name: element.name,\n                value: element.value\n            };\n            domains.push(domain);\n        });\n\n        return { data: domains, error: null};\n    }\n\n    async patchProjectDomains (project: string, domains: Domain[]): Promise<{data: string, error: Error | null}> {\n        if (!project || ! domains) {\n            return { data: \"error\", error: new Error(\"project id and domains data are required\")};\n        }\n\n        const patchPath = path.replace(\"PROJECT\", project);\n\n        const { data, error } = await this.request<any>(patchPath + 'domains', true, {\n            method: 'PATCH',\n            body: JSON.stringify(domains)\n        })\n\n        if (error) {\n            return { data: \"error\", error: new Error(error.message)};\n        }\n\n        return { data: \"ok\", error: null};\n    }\n\n    async deleteProjectDomains (project: string, domains: Domain[]): Promise<{data: string, error: Error | null}> {\n        if (!project || ! domains) {\n            return { data: \"error\", error: new Error(\"project id and domains data are required\")};\n        }\n\n        const deletePath = path.replace(\"PROJECT\", project);\n\n        const { data, error } = await this.request<any>(deletePath + 'domains', true, {\n            method: 'DELETE',\n            body: JSON.stringify(domains)\n        });\n\n        if (error) {\n            return { data: \"error\", error: new Error(error.message)};\n        }\n\n        return { data: \"ok\", error: null};\n    }\n\n    async getProjects(start: number, offset: number): Promise<{data: UserProject[],error: Error | null}> {\n        const { data, error } = await this.supabase.from(\"projects\")\n        .select(`id,name,description,emoji,domains`)\n        .order(\"created_at\", { ascending: false })\n        .range(start, offset)\n\n        if (error) {\n            return { data: [], error: new Error(error.message)};\n        }\n\n        let projects: UserProject[] = [];\n        data.forEach(element => {\n            let project: UserProject = {\n                id: element.id,\n                description: element.description,\n                emoji: element.emoji,\n                name: element.name,\n                domains: []\n            };\n            element.domains.forEach(domain => {\n                let userProjectDomain: Domain = {\n                    id: domain.id,\n                    name: domain.name,\n                    value: domain.value\n                };\n                project.domains.push(userProjectDomain);\n            });\n            projects.push(project);\n        });\n\n        return { data: projects, error: null};\n    }\n\n    async getProject(id: string): Promise<{data: UserProject,error: Error | null}> {\n        if (!id) {\n            return { data: null, error: new Error(\"project id is required\")};\n        }\n\n        const { data, error } = await this.supabase.from(\"projects\")\n        .select().eq(\"id\", id).maybeSingle();\n\n        if (error) {\n            return { data: null, error: new Error(error.message)};\n        }\n\n        let project: UserProject = {\n            id: data.id,\n            description: data.description,\n            emoji: data.emoji,\n            name: data.name,\n            domains: []\n        };\n        data.domains.forEach(domain => {\n            let userProjectDomain: Domain = {\n                id: domain.id,\n                name: domain.name,\n                value: domain.value\n            };\n            project.domains.push(userProjectDomain);\n        });\n\n        return { data: project, error: null};\n    }\n}\n","import { CMS } from './cms'\nimport { Auth } from './auth'\nimport { Project } from './project'\nimport { applyMixins } from './utils'\nimport { Base } from './base'\n\nclass Spotbase extends Base {}\ninterface Spotbase extends CMS, Auth, Project {}\napplyMixins(Spotbase, [CMS, Auth, Project]);\n\nexport default Spotbase\n","export function applyMixins(derivedCtor: any, baseCtors: any[]) {\n    baseCtors.forEach(baseCtor => {\n      Object.getOwnPropertyNames(baseCtor.prototype).forEach(name => {\n        Object.defineProperty(\n          derivedCtor.prototype,\n          name,\n          Object.getOwnPropertyDescriptor(baseCtor.prototype, name)\n        );\n      });\n    });\n}\n","import { Base } from '../base'\n\nexport class Auth extends Base {\n    async login (user: string, password: string): Promise<{data: boolean, error: Error | null}> {\n        const { data } = await this.supabase.auth.signInWithPassword({\n            email: user,\n            password: password\n        });\n\n        if (data.session) {\n            this.setAuthToken(data.session.access_token);\n\n            return {data: true, error: null}\n        }\n\n        return {data: false, error: new Error(\"login error\")}\n    }\n\n    async logout () {\n        const { error } = await this.supabase.auth.signOut();\n\n        if (error.status != 200) {\n            console.log(error.message)\n        }\n    }\n\n    async isLogged(): Promise<{data: boolean, error: Error | null}> {\n        const { data } = await this.supabase.auth.getSession();\n        if (data.session) {\n            this.setAuthToken(data.session.access_token);\n            return {data: true, error: null}\n        }\n\n        return {data: false, error: new Error(\"is logged error\")}\n    }\n}"],"names":["Base","constructor","config","this","version","basePath","defaultVersion","defaultBaseURL","authToken","supabase","createClient","request","endpoint","auth","options","url","headers","_extends","Authorization","getAuthToken","fetch","then","r","ok","json","Error","statusText","setAuthToken","token","path","Spotbase","derivedCtor","getCMSConfig","project","data","error","getPath","replace","patchCMSConfig","patchPath","method","body","JSON","stringify","message","getItems","getFields","getProgress","getAddon","id","from","select","eq","maybeSingle","name","type","user_id","getAddons","project_id","start","offset","order","ascending","range","addons","forEach","element","push","login","user","password","signInWithPassword","email","session","access_token","logout","signOut","status","console","log","isLogged","getSession","getProjectDomains","domains","value","patchProjectDomains","deleteProjectDomains","deletePath","getProjects","projects","description","emoji","domain","getProject","baseCtor","Object","getOwnPropertyNames","prototype","defineProperty","getOwnPropertyDescriptor"],"mappings":"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"}